
@{
    ViewData["Title"] = "AboutUs";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<p style="text-align: justify;"><span><span><strong>Microservices</strong>
    is an architectural style that structures an application as a collection
    of small autonomous services, modeled around a <strong>business domain.</strong></span></span></p>

   <strong> Differences Between Traditional Architecture and Microservices</strong><br />
Consider an E-commerce application as a use-case to understand the difference between both of them.<br />
<br />
<img style="width:50%;" src="https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2018/02/Differences-Between-Monolithic-Architecture-And-Microservices-What-Is-Microservices-edureka-3.png" />
<br />
<br />
<h1>Architecture of Microservices</h1>
<img style="width:50%;" src="https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2018/02/microservice-architecture-What-Are-Microservices-edureka-1.png" />
<ul style="text-align: justify;"> <li><span>Different clients from different devices try to use different services like search, build, configure&nbsp;and other management&nbsp;capabilities</span></li> <li><span>All the services are separated&nbsp;based on their&nbsp;domains and functionalities and&nbsp; are further allotted to individual microservices</span></li> <li><span>These microservices have their own <strong>load balancer</strong> and <strong>execution environment</strong> to execute their functionalities &amp; at the same time captures data in their own databases</span></li> <li><span>All the microservices communicate with each other through a stateless server which is either <strong>REST</strong> or <strong>Message Bus</strong></span></li> <li><span>Microservices know their path of communication with the help of <strong>Service Discovery </strong>and&nbsp;perform operational capabilities such as automation, monitoring</span></li> <li><span>Then all the functionalities performed by microservices are communicated to clients via&nbsp;<strong>API Gateway</strong></span></li> <li><span>All the internal points are connected from the API Gateway. So, anybody who connects to the API Gateway automatically gets connected to the complete system</span></li></ul>
<h1>Microservices Features</h1>
<img style="width:50%;" src="https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2018/02/Microservices-Features-What-Is-Microservices-edureka.png" />
<br />
<br />
<ul style="text-align: justify;"> <li><span><strong>Decoupling</strong> – Services within a system are largely decoupled. So the application as a whole can be easily built, altered, and scaled</span></li> <li><span><strong>Componentization</strong> – Microservices are treated as independent components that can be easily replaced and upgraded</span></li> <li><span><strong>Business Capabilities</strong> – Microservices are very simple and focus on a single capability&nbsp;</span></li> <li><span><strong>Autonomy</strong> – Developers and teams can work independently of each other, thus increasing speed</span></li> <li><span><strong>Continous Delivery</strong> – Allows frequent releases of software, through systematic automation of software creation, testing, and approval&nbsp;</span></li> <li><span><strong>Responsibility</strong> – Microservices do not focus on applications as projects.&nbsp;Instead, they treat applications as products for which they are responsible&nbsp;</span></li> <li><span><strong>Decentralized Governance</strong> – The focus is on using the right tool for the right job. That means there is no standardized pattern or any technology pattern. </span><span>Developers have the freedom to choose the best useful tools to solve their problems&nbsp;</span></li> <li><span><strong>Agility</strong> – Any new feature can be quickly developed and discarded again</span></li></ul><br />
<br />
<br />
<strong>What are the Best Practices to Design Microservices?</strong>
In today’s world, complexity has managed to creep into products. Microservice architecture promises to keep teams scaling and function better.
<br />
The following are the best practices to design them:
<br />
<img src="https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2018/02/Best-practices-to-design-microservices-What-Are-Microservices-edureka-2-768x421.png" />